#3rd party imports
import numpy as np
import numpy.linalg as nl
import scipy.linalg as sl

#internal imports
from det.alpha_ABC.Anomaly_Detection_ABC import AlphaResultObject

def pronys_ad(inp, threshold=2, period=7):
    nfreq = period//2
    train = inp[:period]
    data = inp[period:]
    test_val = inp.iloc[-1]

    _data = []
    SIGIDX = 3
    NORMIDX = 2
    MEANIDX = 1

    lo = len(data)-period
    while lo >= 0:
        _data.append([lo, np.mean(data[lo:lo+period]),  nl.norm(data[lo:lo+period] - np.mean(data[lo:lo+period])), data[lo:lo+period]])
        lo -= period
    _data = _data[::-1]

    normalized_data = np.hstack([ (_[SIGIDX] - _[MEANIDX])/_[NORMIDX] for _ in _data] ) 
    A = sl.hankel(normalized_data, normalized_data[-period:])[:period, :]
    try:
        u,s,v = nl.svd(A)
    except nl.LinAlgError as e:
        raise(e)
    
    _s = s.copy()
    _s[2*nfreq+1:]=0
    _S = np.zeros((u.shape[1], v.shape[0]))
    _S[:len(_s), :u.shape[1]] = np.diag(_s)
    _A = u.dot(_S.dot(v))
    _b = train - np.mean(train)
    _b /= nl.norm(_b)
    try:
        _x = sl.lstsq(_A, _b)[0]
    except ValueError as e:
        raise(e)
    profile = _A.dot(_x)

    sig = _data[-1][SIGIDX]
    fit = profile * _data[-1][NORMIDX]  + _data[-1][MEANIDX]
    prediction = fit[-1]
    error = prediction - test_val
    inp_mean = np.mean(inp[:-1])
    inp_std = np.std(inp[:-1])
    inp_median = np.median(inp[:-1])
    thres =  inp_std*inp_median/inp_mean
    E2SD_ratio = np.absolute(error)/thres
    metric_values = [prediction, test_val, error, period, inp_mean, inp_std, E2SD_ratio,E2SD_ratio>threshold, 0, -1]
    metric_names = [AlphaResultObject.PREDICTION, 'original_value', 'residual', 'model_period', 'mean', 'standard_deviation', AlphaResultObject.ERROR_COEFF, AlphaResultObject.IS_ANOMALY, AlphaResultObject.STATUS_CODE, AlphaResultObject.SEVERITY]
    return dict(zip(metric_names, metric_values))
