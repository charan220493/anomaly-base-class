from logging import getLogger as _getLogger, DEBUG as _DEBUG
from det.anomaly_detection.AREngine import agg_ar_gen as AR_
from det.anomaly_detection.PronysAD import pronys_ad as PRONYS_
from det.alpha_ABC.Anomaly_Detection_ABC import AlphaBaseClass, AlphaResultObject
from pandas import read_csv as _read_csv, pivot_table as _pivot_table, DataFrame as _DataFrame, Series as _Series, date_range as _date_range, _libs as _pandaslibs
from numpy import nonzero as _nonzero, array as _array, float as _float, float64 as _float64, int64 as _int64, mean as _mean, random as _random, ones as _ones, sum as _sum, sqrt as _sqrt, arange as _arange, concatenate as _concatenate, apply_over_axes as _apply_over_axes, absolute as _absolute


class SubAlphaResult(AlphaResultObject):

	def __init__(self, true_value=-1, mean=-1, std=-1, lag=-1, E2SD=-1):
		super().__init__()
		self.mean = mean
		self.standard_deviation = std
		self.lag = lag
		self.E2SD = E2SD
		self.true_value = true_value

	@property
	def metric_column_list(self):
		return super().metric_column_list + ['true_value', 'lag', 'mean', 'standard_deviation', 'E2SD']


class AutoRegressionImplementation(AlphaBaseClass):

	def __init__(self, value_col_list, threshold_dict, default_threshold=2):
		super().__init__(value_columns=value_col_list, default_threshold=default_threshold, threshold_dict=threshold_dict)

	def apply_prediction(self, data=None, agg_col_name=None, param_dict=None):

		if str(agg_col_name) in self.ad_thresholds_aggregator:
			return AR_(data, self.ad_thresholds_aggregator[agg_col_name], frequency=param_dict['frequency'])
		else:
			raise ValueError('Unsupported AD call for value column ' + str(agg_col_name))

class PronysAD(AlphaBaseClass):

	def __init__(self, value_col_list, threshold_dict, default_threshold=2):
		super().__init__(value_columns=value_col_list, default_threshold=default_threshold, threshold_dict=threshold_dict)

	def apply_prediction(self, data=None, agg_col_name=None, param_dict=None):

		if str(agg_col_name) in self.ad_thresholds_aggregator:
			return PRONYS_(data, self.ad_thresholds_aggregator[agg_col_name], period=param_dict['period'])
		else:
			raise ValueError('Unsupported AD call for value column ' + str(agg_col_name))
